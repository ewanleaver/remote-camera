// Generated by CoffeeScript 1.7.1

/*
	written by Kenta Katsura
 */

(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.skydrop;

  window.Skydrop = (function() {
    Skydrop.SKYWAY_APIKEY = "4362638a-9e84-11e3-9939-47b360702393";

    Skydrop.CHUNK_SIZE = 1024 * 1024;

    Skydrop.WINDOW_SIZE = 10;


    /*
    	コンストラクタ
     */

    function Skydrop() {
      this.windowResize = __bind(this.windowResize, this);
      this.drawFriendProgressBar = __bind(this.drawFriendProgressBar, this);
      this.getUrlFacebookIcon = __bind(this.getUrlFacebookIcon, this);
      this.handleFacebookAuthResponseChange = __bind(this.handleFacebookAuthResponseChange, this);
      this.fileRead = __bind(this.fileRead, this);
      this.handleDroppedFile = __bind(this.handleDroppedFile, this);
      this.handleReceived = __bind(this.handleReceived, this);
      this.checkUserList = __bind(this.checkUserList, this);
      this.timer_peer_list = null;
      this.fb_token = null;
      this.fb_uid = null;
      this.fb_friends = {};
      this.fb_peers = {};
      this.fb_passive_tmp = {};
      this.peer = null;
      this.peer_id = null;
      this.file = {
        is_loaded: false,
        data: null,
        name: null,
        type: null,
        size: 0
      };
      this.my_progress = 0;
      this.recv_files = {};
      this.initializeView();
      this.initializeReadFile();
      this.initializeFacebook();
    }

    Skydrop.prototype.phaseToppage = function() {};

    Skydrop.prototype.phaseSelectFriends = function() {
      $(".fb_user_icon").attr("src", this.getUrlFacebookIcon(this.fb_uid));
      this.glide.next();
      this.facebookGetFriends((function(_this) {
        return function(data) {
          var u, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            u = data[_i];
            _results.push(_this.fb_friends[u.id] = u);
          }
          return _results;
        };
      })(this));
      this.connectServer(this.fb_uid);
      return this.timer_peer_list = setInterval(this.checkUserList, 2000);
    };


    /*
    	Peer初期化
     */

    Skydrop.prototype.connectServer = function(uid) {
      if (this.peer !== null) {
        console.log("error: already initialized");
        console.log(this.peer);
        return false;
      }
      this.peer_id = "" + uid + "_" + (this.getUnixTime());
      this.peer = new Peer(this.peer_id, {
        key: Skydrop.SKYWAY_APIKEY,
        debug: 3
      });
      this.peer.on("open", (function(_this) {
        return function() {
          return console.log("my_id is " + _this.peer.id);
        };
      })(this));
      this.peer.on("error", (function(_this) {
        return function() {
          return console.log("error");
        };
      })(this));
      this.peer.on("connection", (function(_this) {
        return function(conn) {
          _this.fb_passive_tmp[conn.peer] = conn;
          return conn.on("open", function() {
            return conn.on("data", _this.handleReceived);
          });
        };
      })(this));
      return true;
    };


    /*
    	ノードに接続する
     */

    Skydrop.prototype.connectPeer = function(fid, onOpenCallback) {
      if (onOpenCallback == null) {
        onOpenCallback = null;
      }
      if (this.fb_peers[fid].conn !== null) {
        console.log("already connected to " + fid);
        return;
      }
      console.log("connect to " + fid);
      this.fb_peers[fid].conn = this.peer.connect(this.fb_peers[fid].pid);
      return this.fb_peers[fid].conn.on("open", (function(_this) {
        return function() {
          _this.fb_peers[fid].conn.on("data", _this.handleReceived);
          _this.sendHello(fid);
          if (onOpenCallback != null) {
            return onOpenCallback(fid);
          }
        };
      })(this));
    };


    /*
    	送信
     */

    Skydrop.prototype.sendMsg = function(fid, type, msg) {
      msg.fid = this.fb_uid;
      msg.type = type;
      return this.fb_peers[fid].conn.send(Base64.encode(JSON.stringify(msg)));
    };


    /*
    	ユーザーリストを取得
     */

    Skydrop.prototype.checkUserList = function() {
      return $.get("https://skyway.io/active/list/" + Skydrop.SKYWAY_APIKEY, (function(_this) {
        return function(list) {
          var fid, login_date, old_fids, pid, tmp, user_ids, _i, _j, _k, _len, _len1, _len2, _results;
          if (_this.fb_uid === null || _this.fb_token === null) {
            return;
          }
          old_fids = Object.keys(_this.fb_peers);
          for (_i = 0, _len = old_fids.length; _i < _len; _i++) {
            fid = old_fids[_i];
            _this.fb_peers[fid].is_tmp_exist = false;
          }
          user_ids = {};
          for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
            pid = list[_j];
            tmp = pid.split("_");
            fid = tmp[0];
            login_date = tmp[1];
            if (fid === _this.fb_uid) {
              continue;
            }
            if (user_ids[fid] == null) {
              user_ids[fid] = pid;
            } else {
              if (pid > user_ids[fid]) {
                user_ids[fid] = pid;
              }
            }
          }
          for (fid in user_ids) {
            pid = user_ids[fid];
            if (_this.fb_friends[fid] == null) {
              continue;
            }
            if (_this.fb_peers[fid] != null) {
              _this.fb_peers[fid].is_tmp_exist = true;
              if (_this.fb_peers[fid].pid !== pid) {
                _this.fb_peers[fid].pid = pid;
                if (_this.fb_peers[fid].conn !== null) {
                  _this.fb_peers[fid].conn.close();
                  _this.fb_peers[fid].conn = null;
                }
              }
              continue;
            }
            _this.fb_peers[fid] = {
              pid: pid,
              name: _this.fb_friends[fid].name,
              is_selected: true,
              conn: null,
              window_count: 0,
              progress_count: 0
            };
            console.log("success");
            console.log(_this.fb_friends[fid]);
            _this.addViewFacebookFriends(fid);
          }
          _results = [];
          for (_k = 0, _len2 = old_fids.length; _k < _len2; _k++) {
            fid = old_fids[_k];
            if (!_this.fb_peers[fid].is_tmp_exist) {
              console.log("deleted. [fid = " + fid + "]");
              delete _this.fb_peers[fid];
              _results.push(_this.deleteViewFacebookFriends(fid));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
    };


    /*
    	選択ピアにファイル受信要求を送信し始める
     */

    Skydrop.prototype.startSendFileReceiveRequest = function() {
      var fid, p, _ref, _results;
      if (this.file.is_loaded == null) {
        console.log("error: file not found.");
        return false;
      }
      this.file.send_peer_num = 0;
      this.file.send_peer_cnt = 0;
      _ref = this.fb_peers;
      _results = [];
      for (fid in _ref) {
        p = _ref[fid];
        if (this.file.is_private === null || this.file.is_private === fid) {
          if (p.is_selected === true) {
            this.file.send_peer_num += 1;
            if (p.conn == null) {
              _results.push(this.connectPeer(fid, (function(_this) {
                return function(connected_fid) {
                  console.log("now, send fileReceiveRequest to " + connected_fid);
                  return _this.sendFileReceiveRequest(connected_fid);
                };
              })(this)));
            } else {
              _results.push(this.sendFileReceiveRequest(fid));
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };


    /*
    	特定ピアにファイル受信要求を送信
     */

    Skydrop.prototype.sendFileReceiveRequest = function(fid) {
      if (this.fb_peers[fid].conn == null) {
        console.log("error: have not connected peer yet");
        return false;
      }
      this.sendMsg(fid, "recv_request", {
        file_name: this.file.name,
        file_type: this.file.type,
        file_size: this.file.size
      });
      console.log(this.file.size);
      return console.log("[send] file receive request");
    };


    /*
    	特定ピアにファイル受信要求を送信
     */

    Skydrop.prototype.sendFileReceiveResponse = function(fid, is_recv) {
      if (this.fb_peers[fid].conn == null) {
        console.log("error: have not connected passive peer yet");
        return false;
      }
      this.sendMsg(fid, "recv_response", {
        is_recv: is_recv
      });
      return console.log("[send] file receive response");
    };


    /*
    	チャンク受信確認
     */

    Skydrop.prototype.sendRecvChunk = function(fid, chunk_recv_cnt, chunk_num) {
      return this.sendMsg(fid, "recv_chunk", {
        chunk_recv_cnt: chunk_recv_cnt,
        chunk_num: chunk_num
      });
    };


    /*
    	ファイル受信確認
     */

    Skydrop.prototype.sendRecvCompleted = function(fid) {
      return this.sendMsg(fid, "recv_completed", {});
    };


    /*
    	ハンドシェイクメッセージ
     */

    Skydrop.prototype.sendHello = function(fid) {
      if (this.fb_peers[fid].conn == null) {
        console.log("error: have not connected peer yet");
        return false;
      }
      return this.sendMsg(fid, "hello", {
        pid: this.peer_id
      });
    };


    /*
    	ファイル送信開始
     */

    Skydrop.prototype.startSendFile = function(fid) {
      var chunk_no, send_func, timer;
      if (this.file.is_loaded === false) {
        console.log("error: file not found.");
        return false;
      }
      this.sendMsg(fid, "file_starting", {
        file_name: this.file.name,
        file_type: this.file.type,
        file_size: this.file.data.length,
        chunk_num: this.file.chunk_num
      });
      this.fb_peers[fid].window_count = 0;
      chunk_no = 0;
      timer = null;
      send_func = (function(_this) {
        return function() {
          var offset, send_size;
          if (_this.peer_id === null) {
            clearInterval(timer);
            return;
          }
          if (_this.fb_peers[fid].window_count === Skydrop.WINDOW_SIZE) {
            return;
          }
          _this.fb_peers[fid].window_count += 1;
          offset = chunk_no * Skydrop.CHUNK_SIZE;
          if (Skydrop.CHUNK_SIZE + offset > _this.file.data.length) {
            send_size = _this.file.data.length - offset;
          } else {
            send_size = Skydrop.CHUNK_SIZE;
          }
          console.log("send chunk " + (chunk_no + 1) + "/" + _this.file.chunk_num + " (offset: " + offset + ", size: " + send_size + ", length: " + _this.file.data.length + ")");
          _this.sendMsg(fid, "file", {
            file_name: _this.file.name,
            data: _this.file.data.substr(offset, send_size),
            chunk_no: chunk_no,
            offset: offset,
            send_size: send_size
          });
          chunk_no += 1;
          if (chunk_no === _this.file.chunk_num) {
            return clearInterval(timer);
          }
        };
      })(this);
      return timer = setInterval(send_func, 50);
    };

    Skydrop.prototype.addFileReceiveCompletedCount = function() {
      this.file.send_peer_cnt += 1;
      if (this.file.send_peer_cnt === this.file.send_peer_num) {
        this.hiddenWindowStatus(this.fb_uid);
        return this.visibleWindowStatus(this.fb_uid, "ファイルの送信が完了しました", 5000);
      }
    };


    /*
    	データ受信時イベント
     */

    Skydrop.prototype.handleReceived = function(message) {
      var blob, element, i, msg, result, url, _i, _j, _ref, _ref1, _results;
      console.log("[handle] handleReceived");
      msg = JSON.parse(Base64.decode(message));
      console.log("[recv] " + msg.type);
      switch (msg.type) {
        case "hello":
          if (!this.fb_passive_tmp[msg.pid]) {
            console.log("[error] @fb_passive_tmp dont have " + msg.pid);
            return;
          }
          this.fb_peers[msg.fid].conn = this.fb_passive_tmp[msg.pid];
          return this.fb_passive_tmp[msg.pid] = null;
        case "recv_request":
          console.log(msg);
          return this.visibleWindowRecv(msg.fid, msg.file_name, msg.file_size, false);
        case "recv_response":
          if (msg.is_recv) {
            return this.startSendFile(msg.fid);
          } else {
            return this.addFileReceiveCompletedCount();
          }
          break;
        case "recv_chunk":
          this.fb_peers[msg.fid].window_count -= 1;
          return this.drawFriendProgressBar(msg.fid, 100 * msg.chunk_recv_cnt / msg.chunk_num);
        case "recv_completed":
          this.drawFriendProgressBar(msg.fid, 0);
          return this.addFileReceiveCompletedCount();
        case 'file_starting':
          this.visibleWindowStatus(msg.fid, "ファイルを受信中です");
          this.recv_files[msg.fid] = {
            name: msg.file_name,
            type: msg.file_type,
            size: msg.file_size,
            data: [],
            chunk_num: msg.chunk_num,
            chunk_recv_cnt: 0
          };
          _results = [];
          for (i = _i = 0, _ref = this.recv_files[msg.fid].chunk_num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(this.recv_files[msg.fid].data[i] = "");
          }
          return _results;
          break;
        case 'file':
          console.log("recv file chunk " + (msg.chunk_no + 1) + "/" + this.recv_files[msg.fid].chunk_num + " (offset: " + msg.offset + ", size: " + msg.send_size + ", length: " + this.recv_files[msg.fid].size + ")");
          this.recv_files[msg.fid].data[msg.chunk_no] = msg.data;
          this.recv_files[msg.fid].chunk_recv_cnt += 1;
          this.drawFriendProgressBar(msg.fid, 100 * this.recv_files[msg.fid].chunk_recv_cnt / this.recv_files[msg.fid].chunk_num);
          this.sendRecvChunk(msg.fid, this.recv_files[msg.fid].chunk_recv_cnt, this.recv_files[msg.fid].chunk_num);
          if (this.recv_files[msg.fid].chunk_recv_cnt === this.recv_files[msg.fid].chunk_num) {
            result = "";
            for (i = _j = 0, _ref1 = this.recv_files[msg.fid].chunk_num - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              result += this.recv_files[msg.fid].data[i];
            }
            this.sendRecvCompleted(msg.fid);
            blob = Util.dataURLToBlob(result);
            url = URL.createObjectURL(blob);
            element = $("[fid=" + msg.fid + "]").find(".window_recv");
            element.find(".skydrop-btn-save").attr("href", url).attr("download", this.recv_files[msg.fid].name);
            this.drawFriendProgressBar(msg.fid, 0);
            this.hiddenWindowStatus(msg.fid);
            return this.visibleWindowRecv(msg.fid, this.recv_files[msg.fid].name, this.recv_files[msg.fid].size, true);
          }
          break;
        default:
          return console.log("error: cant understand recv message type " + msg.type);
      }
    };


    /*
    	D&Dの初期化
     */

    Skydrop.prototype.initializeReadFile = function() {
      return this.addDropEvent($(".droppable"));
    };

    Skydrop.prototype.addDropEvent = function(element) {
      element.bind("dragover", (function(_this) {
        return function(event) {
          return _this.cancelEvent(event);
        };
      })(this));
      element.bind("dragenter", (function(_this) {
        return function(event) {
          element.addClass("dropover");
          return _this.cancelEvent(event);
        };
      })(this));
      element.bind("dragleave", (function(_this) {
        return function(event) {
          element.removeClass("dropover");
          return _this.cancelEvent(event);
        };
      })(this));
      element.bind("dragend", (function(_this) {
        return function(event) {
          element.removeClass("dropover");
          return _this.cancelEvent(event);
        };
      })(this));
      return element.bind("drop", (function(_this) {
        return function(event) {
          return _this.handleDroppedFile(event);
        };
      })(this));
    };


    /*
    	指定フレンドのアイコンにD&Dイベントを追加
     */

    Skydrop.prototype.addDropEventToFriend = function(element, fid) {
      element = element;
      this.addDropEvent(element);
      element.unbind("drop");
      return element.bind("drop", (function(_this) {
        return function(event) {
          return _this.handleDroppedFile(event, fid);
        };
      })(this));
    };


    /*
    	ドロップ時イベント
     */

    Skydrop.prototype.handleDroppedFile = function(event, fid) {
      var file;
      if (fid == null) {
        fid = null;
      }
      $(".dropover").removeClass("dropover");
      event.preventDefault();
      event.stopPropagation();
      file = event.originalEvent.dataTransfer.files[0];
      this.fileRead(file, fid);
      return false;
    };


    /*
    	ファイル読み込み
     */

    Skydrop.prototype.fileRead = function(file, fid) {
      var reader;
      if (fid == null) {
        fid = null;
      }
      reader = new FileReader();
      reader.onerror = (function(_this) {
        return function(event) {
          console.log("Drop error");
          return console.log(event);
        };
      })(this);
      reader.onabort = (function(_this) {
        return function(event) {
          return console.log("abort");
        };
      })(this);
      reader.onprogress = (function(_this) {
        return function(event) {
          var percentLeaded;
          if (event.lengthComputable) {
            percentLeaded = Math.round(event.loaded / event.total * 100);
            if (percentLeaded < 100) {
              return _this.drawFriendProgressBar(_this.fb_uid, percentLeaded);
            }
          }
        };
      })(this);
      reader.onload = (function(_this) {
        return function(event) {
          _this.drawFriendProgressBar(_this.fb_uid, 100);
          _this.file = {
            is_loaded: true,
            is_private: fid,
            data: event.target.result,
            name: file.name,
            type: file.type,
            size: file.size,
            chunk_num: Math.ceil(event.target.result.length / Skydrop.CHUNK_SIZE)
          };
          return _this.visibleWindowDropped();
        };
      })(this);
      reader.readAsDataURL(file);
      return false;
    };

    Skydrop.prototype.initializeFacebook = function() {
      $.ajaxSetup({
        cache: true
      });
      return $.getScript("//connect.facebook.net/ja_JP/all.js", (function(_this) {
        return function() {
          FB.init({
            appId: "274159369413442"
          });
          FB.getLoginStatus(_this.handleFacebookAuthResponseChange);
          return $("#fblogin_button").removeClass("disabled");
        };
      })(this));
    };


    /*
    	Facebook Login
     */

    Skydrop.prototype.facebookLogin = function() {
      FB.Event.subscribe("auth.authResponseChange", this.handleFacebookAuthResponseChange);
      return FB.login(null, {
        scope: "user_friends"
      });
    };


    /*
    	Facebook logout
     */

    Skydrop.prototype.facebookLogout = function() {
      return FB.logout(function() {
        console.log("logout!");
        $('#fblogin_button').removeClass('disabled');
        return $('#fblogout_button').addClass('disabled');
      });
    };


    /*
    	友達リストの取得
     */

    Skydrop.prototype.facebookGetFriends = function(callback) {
      if (this.fb_token === null) {
        return false;
      }
      return FB.api("/me/friends", (function(_this) {
        return function(response) {
          return callback(response.data);
        };
      })(this));
    };


    /*
    	Facebookログイン状態変更イベント
     */

    Skydrop.prototype.handleFacebookAuthResponseChange = function(response) {
      console.log("CAHNGE STATUS");
      console.log(response);
      if (response.status === "connected") {
        this.fb_uid = response.authResponse.userID;
        this.fb_token = response.authResponse.accessToken;
        $(".airdrop_my_icon").attr("fid", this.fb_uid);
        $(".airdrop_my_icon .icon > img").attr("src", this.getUrlFacebookIcon(this.fb_uid));
        return this.phaseSelectFriends();
      }
    };

    Skydrop.prototype.getUrlFacebookIcon = function(id) {
      return "https://graph.facebook.com/" + id + "/picture?width=100&height=100";
    };

    Skydrop.prototype.getUnixTime = function() {
      return parseInt((new Date) / 1000);
    };

    Skydrop.prototype.cancelEvent = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    };

    Skydrop.prototype.initializeView = function() {
      this.canvas_main = $(".airdrop_background").get(0).getContext('2d');
      this.friends_count = 0;
      $(".slider").glide({
        arrowRightText: "",
        arrowLeftText: "",
        autoplay: false,
        circular: false,
        arrows: false,
        navigation: false,
        keyboard: false
      });
      this.glide = $('.slider').glide().data('api_glide');
      $(".slider").css({
        "display": "block"
      });
      $(window).bind("resize", this.windowResize);
      $("#fblogin_button").click((function(_this) {
        return function() {
          return _this.facebookLogin();
        };
      })(this));
      $("#logout_button").click((function(_this) {
        return function() {
          _this.facebookLogout();
          _this.glide.prev();
          clearInterval(_this.timer_peer_list);
          _this.peer.destroy();
          return _this.peer_id = null;
        };
      })(this));
      $(".for_android").change((function(_this) {
        return function(event) {
          if (event.target.files[0] != null) {
            return _this.fileRead(event.target.files[0]);
          }
        };
      })(this));
      this.resizeCanvas();
      return this.drawCircle();
    };

    Skydrop.prototype.addViewFacebookFriends = function(fid) {
      var element, pos;
      this.friends_count = this.friends_count + 1;
      element = $("#for_clone_airdrop_icon").clone();
      element.attr("id", "airdrop_icon_" + fid);
      element.attr("fid", fid);
      element.attr("friends_count", this.friends_count);
      pos = this.computeFriendsDisplayPosition(this.friends_count);
      element.css("bottom", "" + pos.bottom + "px");
      element.css("left", "" + pos.left + "px");
      element.find(".icon > img").attr("src", this.getUrlFacebookIcon(fid));
      element.find("canvas").click((function(_this) {
        return function(event) {
          var imgdiv;
          fid = element.attr("fid");
          imgdiv = element.find(".icon");
          if (_this.fb_peers[fid].is_selected) {
            _this.fb_peers[fid].is_selected = false;
            return imgdiv.addClass("unselected");
          } else {
            _this.fb_peers[fid].is_selected = true;
            return imgdiv.removeClass("unselected");
          }
        };
      })(this));
      this.addDropEventToFriend(element, fid);
      element.css("display", "none");
      $(".fb_friends_icon_box").append(element);
      return element.fadeIn("slow");
    };

    Skydrop.prototype.deleteViewFacebookFriends = function(fid) {
      $("[fid=" + fid + "]").fadeOut("slow", (function(_this) {
        return function() {
          return $("[fid=" + fid + "]").remove();
        };
      })(this));
      this.friends_count = 0;
      $(".fb_friends_icon_box").children().each((function(_this) {
        return function(target) {
          console.log(target);
          _this.friends_count = _this.friends_count + 1;
          return target.attr("friends_count", _this.friends_count);
        };
      })(this));
      console.log(this.friends_count);
      return this.windowResize();
    };


    /*
    	Canvasをリサイズ
     */

    Skydrop.prototype.resizeCanvas = function() {
      var size;
      size = this.getCanvasSize();
      return $(".airdrop_background").attr("width", size.width).attr("height", size.height);
    };


    /*
    	Canvasの大きさを取得
     */

    Skydrop.prototype.getCanvasSize = function() {
      var size;
      return size = {
        width: $(".content").width(),
        height: $(".content").height()
      };
    };


    /*
    	円の半径を計算
     */

    Skydrop.prototype.computeCircleRadius = function(number) {
      var i, radius, _i;
      radius = 0;
      for (i = _i = 1; 1 <= number ? _i <= number : _i >= number; i = 1 <= number ? ++_i : --_i) {
        radius = 100 * i + radius * 0.5;
      }
      return radius;
    };


    /*
    	円を描画
     */

    Skydrop.prototype.drawCircle = function() {
      var i, radius, size, _i, _results;
      size = this.getCanvasSize();
      this.canvas_main.clearRect(0, 0, size.width, size.height);
      this.canvas_main.lineWidth = 1;
      this.canvas_main.strokeStyle = 'rgb(200, 200, 200)';
      _results = [];
      for (i = _i = 1; _i <= 5; i = ++_i) {
        radius = this.computeCircleRadius(i);
        this.canvas_main.beginPath();
        this.canvas_main.arc(size.width / 2, size.height - 90, radius, 0, Math.PI * 2, false);
        _results.push(this.canvas_main.stroke());
      }
      return _results;
    };


    /*
    	n番目の円に存在できる友達の数を計算
     */

    Skydrop.prototype.computeFriendsNum = function(number) {
      return number + 2;
    };


    /*
    	指定番目の友人がどこに位置するのか計算
     */

    Skydrop.prototype.computeFriendsLocation = function(count) {
      var i, pos;
      i = 2;
      while (1.) {
        if (count <= this.computeFriendsNum(i)) {
          pos = {
            circle: i,
            num: count
          };
          return pos;
        }
        count = count - this.computeFriendsNum(i);
        i = i + 1;
      }
    };


    /*
    	指定番目の友人の画面位置を取得
     */

    Skydrop.prototype.computeFriendsDisplayPosition = function(count) {
      var center, location, pos, radius, size, theta;
      location = this.computeFriendsLocation(count);
      radius = this.computeCircleRadius(location.circle);
      theta = 120 / (this.computeFriendsNum(location.circle) - 1);
      size = this.getCanvasSize();
      center = {
        bottom: 40,
        left: size.width / 2
      };
      pos = {
        bottom: center.bottom + radius * Math.sin(Math.PI / 180 * (theta * (location.num - 1) + 30)),
        left: center.left - radius * Math.cos(Math.PI / 180 * (theta * (location.num - 1) + 30))
      };
      return pos;
    };


    /*
    	進捗状況を表示
     */

    Skydrop.prototype.drawFriendProgressBar = function(fid, current) {
      var c, circ, i, progress, quart, _i;
      c = $("[fid=" + fid + "]").find(".progressbar").get(0).getContext("2d");
      c.clearRect(0, 0, 600, 500);
      if (current === 0) {
        return;
      }
      circ = Math.PI * 2;
      quart = Math.PI / 2;
      c.lineWidth = 10.0;
      c.strokeStyle = '#99CC33';
      c.lineCap = 'square';
      if (fid === this.fb_uid) {
        progress = this.my_progress;
      } else {
        progress = this.fb_peers[fid].progress_count;
      }
      for (i = _i = progress; progress <= current ? _i <= current : _i >= current; i = progress <= current ? ++_i : --_i) {
        c.beginPath();
        c.arc(50, 50, 45, -quart, (circ * current / 100) - quart, false);
        c.stroke();
      }
      if (fid === this.fb_uid) {
        return this.my_progress = current;
      } else {
        return this.fb_peers[fid].progress_count = current;
      }
    };


    /*
    	友達位置を再設定
     */

    Skydrop.prototype.resizeDrawFriends = function(target_no) {
      var element, pos;
      pos = this.computeFriendsDisplayPosition(target_no);
      element = $("[friends_count=" + target_no + "]");
      element.css("bottom", "" + pos.bottom + "px");
      return element.css("left", "" + pos.left + "px");
    };


    /*
    	情報ウィンドウの表示・非表示
     */

    Skydrop.prototype.visibleWindowStatus = function(fid, string, fadeout_millisec) {
      var element;
      if (fadeout_millisec == null) {
        fadeout_millisec = null;
      }
      element = $("[fid=" + fid + "]").find(".window_status");
      element.find(".status > p").text(string);
      element.css("display", "block");
      if (fadeout_millisec !== null) {
        return setTimeout((function(_this) {
          return function() {
            return element.fadeOut("normal");
          };
        })(this), fadeout_millisec);
      }
    };

    Skydrop.prototype.hiddenWindowStatus = function(fid, string) {
      var element;
      element = $("[fid=" + fid + "]").find(".window_status");
      return element.css("display", "none");
    };


    /*
    	ファイル送信ウィンドの表示・非表示
     */

    Skydrop.prototype.visibleWindowDropped = function() {
      var element, size;
      element = $("[fid=" + this.fb_uid + "]").find(".window_dropped");
      element.find(".file_name").text(this.file.name);
      size = String(this.file.size).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      element.find(".file_size").text("(" + size + " byte)");
      element.find(".btn-success").unbind().click((function(_this) {
        return function(event) {
          _this.startSendFileReceiveRequest();
          _this.hiddenWindowDropped();
          _this.drawFriendProgressBar(_this.fb_uid, 0);
          return _this.visibleWindowStatus(_this.fb_uid, "ファイル送信中");
        };
      })(this));
      element.find(".btn-danger").unbind().click((function(_this) {
        return function(event) {
          _this.file = null;
          _this.drawFriendProgressBar(_this.fb_uid, 0);
          return _this.hiddenWindowDropped();
        };
      })(this));
      return element.css('opacity', 0).slideDown('slow').animate({
        opacity: 1
      }, {
        queue: false,
        duration: 'slow'
      });
    };

    Skydrop.prototype.hiddenWindowDropped = function() {
      var element;
      element = $("[fid=" + this.fb_uid + "]").find(".window_dropped");
      return element.animate({
        opacity: 0
      }, {
        queue: false,
        duration: 'fast'
      }, (function(_this) {
        return function() {
          return element.css("display", "none");
        };
      })(this));
    };


    /*
    	ファイル受信ウィンドウの表示・非表示
     */

    Skydrop.prototype.visibleWindowRecv = function(fid, file_name, file_size, is_savemode) {
      var element, size;
      element = $("[fid=" + fid + "]").find(".window_recv");
      element.find(".file_name").text(file_name);
      size = String(file_size).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      element.find(".file_size").text("(" + size + " byte)");
      element.find(".skydrop-btn-recv").unbind().click((function(_this) {
        return function() {
          _this.sendFileReceiveResponse(fid, true);
          return _this.hiddenWindowRecvRequest(fid);
        };
      })(this));
      element.find(".skydrop-btn-abort").unbind().click((function(_this) {
        return function() {
          _this.sendFileReceiveResponse(fid, false);
          return _this.hiddenWindowRecvRequest(fid);
        };
      })(this));
      element.find(".skydrop-btn-save").unbind().click((function(_this) {
        return function() {
          _this.hiddenWindowRecvRequest(fid);
          return true;
        };
      })(this));
      if (is_savemode === false) {
        element.find(".skydrop-btn-recv").css("display", "");
        element.find(".skydrop-btn-abort").css("display", "");
        element.find(".skydrop-btn-save").css("display", "none");
      } else {
        element.find(".skydrop-btn-recv").css("display", "none");
        element.find(".skydrop-btn-abort").css("display", "none");
        element.find(".skydrop-btn-save").css("display", "");
      }
      return element.css('opacity', 0).slideDown('slow').animate({
        opacity: 1
      }, {
        queue: false,
        duration: 'slow'
      });
    };

    Skydrop.prototype.hiddenWindowRecvRequest = function(fid) {
      var element;
      element = $("[fid=" + fid + "]").find(".window_recv");
      return element.animate({
        opacity: 0
      }, {
        queue: false,
        duration: 'fast'
      }, (function(_this) {
        return function() {
          return element.css("display", "none");
        };
      })(this));
    };


    /*
    	リサイズイベント
     */

    Skydrop.prototype.windowResize = function() {
      var i, _i, _ref, _results;
      this.resizeCanvas();
      this.drawCircle();
      if (this.friends_count > 0) {
        _results = [];
        for (i = _i = 1, _ref = this.friends_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(this.resizeDrawFriends(i));
        }
        return _results;
      }
    };

    return Skydrop;

  })();

  $(function() {
    var skydrop;
    skydrop = new Skydrop;
    return window.skydrop = skydrop;
  });

}).call(this);

//# sourceMappingURL=skydrop.map
